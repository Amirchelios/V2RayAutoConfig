name: scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ENABLE_HEALTH_CHECK: '1'
      HEALTH_CHECK_CONCURRENCY: '8'
      MAX_HEALTH_CHECKS_PER_PROTOCOL: '20'
      MAX_HEALTH_CHECKS_TOTAL: '80'
      XRAY_TEST_TIMEOUT: '6'
      HEALTH_CHECK_DEADLINE_SECONDS: '240'
      XRAY_VERSION: 'v25.1.20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Files/requirements.txt

      - name: Restore Xray cache
        uses: actions/cache@v4
        with:
          path: Files/xray-bin
          key: xray-${{ env.XRAY_VERSION }}-${{ runner.os }}

      - name: Ensure Xray binary permissions
        shell: bash
        run: |
          set -e
          if [ -d Files/xray-bin ]; then
            find Files/xray-bin -type f -name "xray" -exec chmod +x {} + || true
            find Files/xray-bin -type f -name "xray.exe" -exec chmod +x {} + || true
          fi

      - name: Run scraper
        run: |
          python Files/scrip.py

      - name: Clean Xray cache files
        if: always()
        run: |
          rm -rf Files/xray-bin || true

      - name: Upload configs artifact
        uses: actions/upload-artifact@v4
        with:
          name: configs
          path: |
            configs
            README.md

      - name: Commit and push changes
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes detected. Skipping commit."
          else
            echo "Changes detected. Committing..."
            git commit -m "docs: Update README and config files ðŸ¤– [skip ci]"
            echo "Pulling remote changes with rebase..."
            git fetch origin
            # If there are any unstaged changes (e.g., from line endings), stash them
            if ! git diff --quiet; then
              git stash push -u -m "pre-pull-stash" || true
              STASHED=1
            else
              STASHED=0
            fi
            git rebase origin/main || { echo "Rebase failed, aborting..."; git rebase --abort; exit 1; }
            if [ "$STASHED" -eq 1 ]; then
              echo "Applying stash..."
              git stash pop || true
            fi
            echo "Pushing changes..."
            git push origin main || { echo "Push failed"; exit 1; }
          fi

