name: 🔗 Shadowsocks Tester - Manual Execution

on:
  # اجرای دستی
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'حالت تست'
        required: true
        default: 'single'
        type: choice
        options:
          - single
          - auto
      max_configs:
        description: 'حداکثر تعداد کانفیگ‌های تست شده'
        required: false
        default: '10000'
        type: string
      batch_size:
        description: 'اندازه batch برای تست'
        required: false
        default: '50'
        type: string
      force_update:
        description: 'به‌روزرسانی اجباری'
        required: false
        default: false
        type: boolean
      test_specific_protocols:
        description: 'پروتکل‌های خاص برای تست'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ss_only
          - ss_with_xray
      log_level:
        description: 'سطح لاگ'
        required: false
        default: 'INFO'
        type: choice
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR

env:
  PYTHON_VERSION: '3.9'
  WORKING_DIRECTORY: './'

jobs:
  test-shadowsocks-manual:
    name: 🧪 تست دستی کانفیگ‌های Shadowsocks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📋 Display test parameters
        run: |
          echo "🔍 پارامترهای تست:"
          echo "  📊 حالت تست: ${{ github.event.inputs.test_mode }}"
          echo "  🔢 حداکثر کانفیگ: ${{ github.event.inputs.max_configs }}"
          echo "  📦 اندازه batch: ${{ github.event.inputs.batch_size }}"
          echo "  🔄 به‌روزرسانی اجباری: ${{ github.event.inputs.force_update }}"
          echo "  🔗 پروتکل‌های تست: ${{ github.event.inputs.test_specific_protocols }}"
          echo "  📝 سطح لاگ: ${{ github.event.inputs.log_level }}"
          echo "  🐍 نسخه Python: ${{ env.PYTHON_VERSION }}"
          echo "  🚀 Triggered by: ${{ github.event_name }}"
          echo "  👤 User: ${{ github.actor }}"
      
      - name: 🔧 Install dependencies
        run: |
          cd ss
          echo "📦 نصب وابستگی‌ها..."
          pip install -r requirements.txt
          echo "✅ وابستگی‌ها نصب شدند"
          echo "📋 لیست پکیج‌های نصب شده:"
          pip list
      
      - name: 📁 Environment validation
        run: |
          echo "🔍 بررسی محیط اجرا..."
          echo "📁 مسیر فعلی: $(pwd)"
          echo "📁 محتویات دایرکتوری ss:"
          ls -la ss/
          
          echo "📁 بررسی فایل‌های Xray:"
          if [ -d "Files/xray-bin" ]; then
            ls -la Files/xray-bin/
            echo "✅ دایرکتوری Xray موجود است"
          else
            echo "❌ دایرکتوری Files/xray-bin یافت نشد"
          fi
          
          echo "📁 بررسی فایل‌های منبع:"
          if [ -d "configs/raw" ]; then
            ls -la configs/raw/
            echo "✅ دایرکتوری منبع موجود است"
          else
            echo "❌ دایرکتوری configs/raw یافت نشد"
          fi
          
          echo "📁 بررسی دایرکتوری‌های خروجی:"
          mkdir -p trustlink logs
          echo "✅ دایرکتوری‌های خروجی آماده شدند"
      
      - name: 🚀 Run Shadowsocks Tester
        run: |
          cd ss
          echo "🚀 شروع تست کانفیگ‌های Shadowsocks..."
          
          # تنظیم متغیرهای محیطی
          export MAX_CONFIGS_TO_TEST="${{ github.event.inputs.max_configs }}"
          export BATCH_SIZE="${{ github.event.inputs.batch_size }}"
          export LOG_LEVEL="${{ github.event.inputs.log_level }}"
          
          echo "🔧 تنظیمات اعمال شد:"
          echo "  MAX_CONFIGS_TO_TEST: $MAX_CONFIGS_TO_TEST"
          echo "  BATCH_SIZE: $BATCH_SIZE"
          echo "  LOG_LEVEL: $LOG_LEVEL"
          
          # اجرای تست
          if [ "${{ github.event.inputs.test_mode }}" = "auto" ]; then
            echo "🔄 اجرای حالت خودکار..."
            timeout 3600 python ss_tester.py --auto || echo "⏰ timeout بعد از 1 ساعت"
          else
            echo "📊 اجرای حالت یکباره..."
            python ss_tester.py
          fi
          
          echo "✅ تست تکمیل شد"
      
      - name: 📊 Analyze results
        run: |
          echo "📊 تحلیل نتایج تست..."
          
          # بررسی فایل‌های خروجی
          if [ -f "trustlink/trustlink_ss.txt" ]; then
            echo "✅ فایل کانفیگ‌های سالم ایجاد شد"
            total_lines=$(wc -l < trustlink/trustlink_ss.txt)
            echo "📁 تعداد خطوط: $total_lines"
            
            # شمارش کانفیگ‌های واقعی (بدون کامنت)
            actual_configs=$(grep -c "^ss://" trustlink/trustlink_ss.txt || echo "0")
            echo "🔗 کانفیگ‌های واقعی: $actual_configs"
          else
            echo "❌ فایل کانفیگ‌های سالم یافت نشد"
          fi
          
          if [ -f "trustlink/.trustlink_ss_metadata.json" ]; then
            echo "✅ فایل متادیتا ایجاد شد"
            echo "📊 خلاصه متادیتا:"
            python -c "import json; data=json.load(open('trustlink/.trustlink_ss_metadata.json')); print(f'آخرین به‌روزرسانی: {data.get(\"last_update\", \"نامشخص\")}'); print(f'کل تست‌ها: {data.get(\"total_tests\", 0)}'); print(f'کانفیگ‌های سالم: {data.get(\"working_configs\", 0)}'); print(f'کل کانفیگ‌ها: {data.get(\"total_configs\", 0)}'); stats=data.get('test_statistics', {}); print(f'اتصال سالم: {stats.get(\"connection_ok\", 0)}'); print(f'دسترسی ایران: {stats.get(\"iran_access_ok\", 0)}'); print(f'شبکه‌های اجتماعی: {stats.get(\"social_media_ok\", 0)}'); print(f'سرعت دانلود: {stats.get(\"download_speed_ok\", 0)}')" 2>/dev/null || echo "⚠️ خطا در خواندن متادیتا"
          else
            echo "❌ فایل متادیتا یافت نشد"
          fi
          
          if [ -f "logs/ss_tester.log" ]; then
            echo "✅ فایل لاگ ایجاد شد"
            echo "📝 آخرین خطوط لاگ:"
            tail -30 logs/ss_tester.log
          else
            echo "❌ فایل لاگ یافت نشد"
          fi
      
      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: shadowsocks-tester-manual-${{ github.run_number }}
          path: |
            trustlink/trustlink_ss.txt
            trustlink/.trustlink_ss_metadata.json
            trustlink/trustlink_ss_backup.txt
            logs/ss_tester.log
            logs/ss_runner.log
          retention-days: 90
      
      - name: 📝 Commit and push results
        run: |
          echo "📝 ثبت و ارسال نتایج..."
          
          # تنظیم Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # اضافه کردن فایل‌های جدید
          git add trustlink/trustlink_ss.txt || echo "⚠️ فایل کانفیگ‌ها اضافه نشد"
          git add trustlink/.trustlink_ss_metadata.json || echo "⚠️ فایل متادیتا اضافه نشد"
          git add trustlink/trustlink_ss_backup.txt || echo "⚠️ فایل پشتیبان اضافه نشد"
          git add logs/ss_tester.log || echo "⚠️ فایل لاگ اضافه نشد"
          
          # بررسی تغییرات
          if git diff --staged --quiet; then
            echo "ℹ️ هیچ تغییری برای ثبت وجود ندارد"
          else
            echo "💾 ثبت تغییرات..."
            git commit -m "🔗 Manual Shadowsocks Test - Run #${{ github.run_number }}
            
            📊 Test Parameters:
            - Mode: ${{ github.event.inputs.test_mode }}
            - Max Configs: ${{ github.event.inputs.max_configs }}
            - Batch Size: ${{ github.event.inputs.batch_size }}
            - Force Update: ${{ github.event.inputs.force_update }}
            - Test Protocols: ${{ github.event.inputs.test_specific_protocols }}
            - Log Level: ${{ github.event.inputs.log_level }}
            
            📁 Output Files:
            - Configs: trustlink/trustlink_ss.txt
            - Metadata: trustlink/.trustlink_ss_metadata.json
            - Backup: trustlink/trustlink_ss_backup.txt
            - Logs: logs/ss_tester.log
            
            🚀 Triggered by: Manual execution
            👤 User: ${{ github.actor }}
            ⏰ Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            🔢 Run ID: ${{ github.run_number }}"
            
            echo "📤 ارسال تغییرات..."
            git push
          fi
      
      - name: 📈 Final summary
        run: |
          echo "🎉 تست دستی Shadowsocks تکمیل شد!"
          echo "📊 خلاصه نهایی:"
          echo "  🔗 کانفیگ‌های تست شده: $(find configs/raw/ -name '*.txt' -exec wc -l {} + | tail -1 | awk '{print $1}' || echo 'نامشخص')"
          echo "  ✅ کانفیگ‌های سالم: $(wc -l < trustlink/trustlink_ss.txt 2>/dev/null || echo '0')"
          echo "  📁 فایل‌های خروجی: trustlink/trustlink_ss.txt"
          echo "  📊 متادیتا: trustlink/.trustlink_ss_metadata.json"
          echo "  📝 لاگ‌ها: logs/ss_tester.log"
          echo "  🎯 Artifact: shadowsocks-tester-manual-${{ github.run_number }}"
          echo "  🚀 Triggered by: ${{ github.actor }}"
          echo "  ⏰ Run ID: ${{ github.run_number }}"
